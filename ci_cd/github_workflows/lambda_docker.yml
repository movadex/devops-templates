name: "Deploy dockerized AWS Lambda"

env:
  AWS_REGION: us-east-1
  DOCKER_IMAGE_NAME: # docker image name in ECR
  ECR_REGISTRY: # ECR URL
  LAMBDA_FUNCTION_NAME: # lambda function name
# also need secrets.AWS_ACCESS_KEY_ID, secrets.AWS_SECRET_ACCESS_KEY

on: # trigger for pipeline
  push: # for dev, auto deploy on push
    branches:
      - dev
  # or
  workflow_dispatch: # for production, no automated deploys


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set GIT_SHA"
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Verify AWS authentication"
        run: aws sts get-caller-identity

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2

      - name: "Log in to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v1

      - name: "Build Docker image"
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: "Tag Docker image"
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest \
            ${{ env.ECR_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:$GIT_SHA

      - name: "Push Docker image to ECR"
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:$GIT_SHA

      - name: "Update Lambda function to use new image"
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ env.ECR_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:$GIT_SHA